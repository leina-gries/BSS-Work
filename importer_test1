"""
This program conects to the websocket transmitting data from the running FS3D
simulation. To run properly, the host and port numbers must be properly matched.
These should be from the local connection to the OpenVPNConnect software.
The data is processed from a string to a pandas dataframe to a geopandas
dataframe, before finally being changed into a geoJSON. This is saved to a file.
"""
import os.path
import pandas as pd
import geopandas as gp
from arcgis.gis import GIS
import requests
import time
import socket
#import fiona
#import shapely

def now_time():
# to track when it is first initiated
    now_time = time.strftime("%H:%M:%S")
    return now_time

def connect_to_socket():
    # connecting information- this should be changed to match OpenVPNConnect's info
    HOST = '10.8.0.10'  # Standard loopback interface address (TBM IP)
    #HOST = '127.0.0.1'  # Standard loopback interface address (localhost)
    PORT = 11194      # Port to listen on (non-privileged ports are > 1023)

    # connecting to the socket and processing the data
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        # these are necesaary for it to work and not bring up the already in use error
        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        print("\nCall Initiated")
        s.bind((HOST, PORT))
        print("\nBound to", HOST, "at port number", PORT)
        s.listen()
        print("\nListening...")
        conn, addr = s.accept()
        print("\nConnection made, accepting data")
        chunk_counter = 0
        round_counter = 0
        b_holder = []
        with conn:
            f = open("savingdatatester3.txt", "w")
            f1 = open("geojtester.geoJSON", "w")
            print('\nConnected by', addr)
            while True:
                try:
                    print("\n ***********round***********")
                    if round_counter == 0:
                        print(now_time)
                    data = conn.recv(1024)
                    print("raw data", data) #***********************************************
                    if round_counter == 0:
                        print(now_time)
                    #Decode data (to get rid of 'b' prefix)
                    data = data.decode('utf-8')
                    if round_counter == 0:
                        print(now_time)

                    x = repr(data).split(",")
                    print("split data", x) #***********************************************

                    # formattiing the data to be passed into pandas
                    b1 = []
                    b2 = []
                    good_holder = []
                    for element in x:
                        test = element.strip()
                        done = test.strip("'")
                        partition = done.partition('.')
                        try:
                            float(done)
                            b1.append(float(done))
                        except:
                            try:
                                int(done)
                                b1.append(int(done))
                            except:
                                b1.append(done)
                    print("\n \n here is formatted data", b1)


                    # pandas section - only trying to convert it to a pandas object
                    # if it has the proper number of sections
                    if len(b1) == 7:
                        df = pd.DataFrame([b1], columns =['ObjectID', 'Aircraft Type', 'Description', 'Callsign', 'Latitude','Longitude','Altitude'])

                        gdf = gp.GeoDataFrame(
                            df, geometry=gp.points_from_xy(df.Longitude, df.Latitude))

                        b1 = []

                        gdf.to_file("aug4tester.geojson", driver='GeoJSON')
                        geoJ = gdf.to_json(na='null', show_bbox=False, drop_id=False)
                        print("geoJ", geoJ)

                    else:

                        chunk_counter += 1
                        print("\n we got a chunk. It had length", len(b1), "instead of 7. It was saved to the file but not made into a JSON right now")


                    f.write(str(x))
                    #print(repr(data))
                    f.write("\n")

                    f1.write(geoJ)
                    f1.write("\n")
                    round_counter += 1




                except KeyboardInterrupt:
                    print("***********2***********")
                    endtime = time.strftime("%H:%M:%S")
                    print("i want to close client socket2")
                    print("this time, we had", chunk_counter, "chunks out of", round_counter, "total rounds")
                    print("elapsed time:", start_time, endtime)
                    #conn.shutdown(1)  # this makes sure it happens in a timely manner, close then closes it
                    #conn.close()  # conn is because this is the listening side, otherwise we are trying to send and cant
                    #s.shutdown(1)
                    s.shutdown(2)
                    s.close()
                    f.close()
                    break
                except socket.error:
                    print("************3**********")
                    endtime = "%H:%M:%S"
                    print("a socket erro has occured, e = ", socket.error)
                    print("this time, we had", chunk_counter, "chunks out of", round_counter, "total rounds")
                    print("elapsed time:", start_time,  endtime)
                    #conn.shutdown(1)  # this makes sure it happens in a timely manner, close then closes it
                    #conn.close()  # conn is because this is the listening side, otherwise we are trying to send and cant
                    s.shutdown(2)
                    s.close()
                    f.close()
                    break
                #send_map(repr(data))
                if not data:
                    print("***********4***********")
                    endtime = "%H:%M:%S"
                    print("this time, we had", chunk_counter, "chunks out of", round_counter, "total rounds")
                    print("elapsed time:", start_time, endtime)
                    #conn.shutdown(1)  # this makes sure it happens in a timely manner, close then closes it
                    #conn.close()  # conn is because this is the listening side, otherwise we are trying to send and cant
                    s.shutdown(2)
                    s.close()
                    f.close()
                    break
            #conn.close()
                #conn.sendall(data)
def main():
    connect_and_process()

main()

"""
# extra functions used at some point...
#Package incoming data as a geopandas dataframe with point data
def send_data(data):

    #Split the comma-delimited string
    pos_array=data.split(',')

    #Build a pandas dataframe
    pos_dataframe = pd.DataFrame({"Callsign":[pos_array[0]], "Latitude":[pos_array[1]],
    "Longitude":[pos_array[2]], "Altitude":[pos_array[3]]})
    #print(pos_dataframe)

    #Convert to a geopandas dataframe with point data
    gdf = gp.GeoDataFrame(pos_dataframe, geometry=gp.points_from_xy(pos_dataframe.Longitude, pos_dataframe.Latitude))
    print(gdf)

    #Append data to a GeoJSON
    gdf.to_file("test.geojson", driver='GeoJSON', mode="a")
# connecting to arcgis
#print("ArcGIS Online Org account")
#gis = GIS("https://www.arcgis.com", "tbmaynard395", "n;d+4Hgp35<s-t!")

#print("Logged in as " + str(gis.properties.user.username))

# arcgis code
##search_result = gis.content.search('title:Aircraft_Position')

##Aircraft_Position = search_result[0]
##print(Aircraft_Position[0])
#Aircraft_Position_layers = Aircraft_Position.layers

#Aircraft_Position_flayer = Aircraft_Position_layers[0]

#Aircraft_Position_fset = Aircraft_Position_layers[0].query()
#Aircraft_Position_fset.sdf

#Aircraft_Position_features = Aircraft_Position_fset.features



#Aircraft_Position_flayer.properties.capabilities

##add_result = Aircraft_Position.edit_features(adds = ["jun17tester.geojson"])
##add_result


# this section is to collect it into lengths of 7 in case
# they are being recieved 'skewed'. But, it was commented
# out as  when the pieces are the wrong size, they are not
#'skewed' or grouped wrong, but missing a section entirely.
# it belongs in the 'else' to if len(b1) ==7:
print("did this ********************************")
for i in range(int((len(b1)/7))):
    if len(b1) >= 7:
        for i in range(0,7):
            b_holder.append(b1[0])
            b1.remove(b1[0])
        print(b_holder, "HOLDER ******************************** HOLDER")
        #df = pd.DataFrame([b_holder], columns =['ObjectID', 'Aircraft Type', 'Description', 'Callsign', 'Latitude','Longitude','Altitude'])

        #gdf = gp.GeoDataFrame(
            #df, geometry=gp.points_from_xy(df.Longitude, df.Latitude))
        print("\n here2.0")
        #print(df)
        print("\n here3.0")
        #print(gdf)
        b_holder = []

    else:
        for i in b1:
            b_holder.append(i)


    """
